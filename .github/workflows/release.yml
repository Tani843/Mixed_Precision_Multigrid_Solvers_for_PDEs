name: Automated Release Pipeline

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Prerelease identifier (optional)'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.10'
  
jobs:
  # Automated version bumping (only on workflow_dispatch)
  prepare-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.bump-version.outputs.version }}
      tag: ${{ steps.bump-version.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Bump version and create release
        id: bump-version
        run: |
          python scripts/release_management.py ${{ github.event.inputs.version_type }} \
            ${{ github.event.inputs.prerelease && format('--prerelease {0}', github.event.inputs.prerelease) || '' }}
          
          # Get the new version
          VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from multigrid._version import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          
          # Push changes and tags
          git push origin main
          git push origin v$VERSION

  # Build and test across platforms
  build-and-test:
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success' || github.event_name == 'push')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce CI load - only test full matrix on Linux
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest  
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel
      
      - name: Build package
        run: |
          python -m build
      
      - name: Install package
        run: |
          pip install dist/*.whl
      
      - name: Run installation verification
        run: |
          python scripts/verify_installation.py --verbose
      
      - name: Run basic tests
        run: |
          python -c "import multigrid; print(f'Successfully imported version {multigrid.__version__}')"
          python -c "import multigrid; solver = multigrid.MultigridSolver(multigrid.Grid(32, 32)); print('Basic functionality verified')"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/
          retention-days: 5

  # GPU testing (separate job for GPU-enabled runners)
  gpu-test:
    runs-on: [self-hosted, gpu]  # Requires self-hosted runner with GPU
    if: false  # Disabled by default - enable when GPU runners are available
    needs: [build-and-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install CUDA dependencies
        run: |
          # Install CUDA toolkit and cupy
          pip install cupy-cuda11x  # Adjust CUDA version as needed
      
      - name: Install package with GPU support
        run: |
          pip install -e .[gpu]
      
      - name: Run GPU verification
        run: |
          python scripts/verify_installation.py --verbose
          python -c "import multigrid; print(f'GPU available: {multigrid.GPU_AVAILABLE}')"

  # Security and quality checks
  security-check:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit safety pip-audit
      
      - name: Run security audit
        run: |
          # Check for known vulnerabilities
          pip-audit --desc
          
          # Security linting
          bandit -r src/ -f json -o bandit-report.json || true
          
          # Safety check
          safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Documentation build test
  docs-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install documentation dependencies
        run: |
          pip install -e .[docs]
      
      - name: Test documentation build
        run: |
          # Test Sphinx build if docs exist
          if [ -d "docs" ]; then
            sphinx-build -b html docs docs/_build/html -W
          fi

  # PyPI publication
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-check]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi-release
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build distribution
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verify-metadata: true

  # GitHub Release creation
  create-github-release:
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate release notes
        id: release-notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Generate release notes from changelog
          python << 'EOF'
          import re
          import sys
          
          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()
              
              # Find the section for this version
              version = "${{ github.ref_name }}".replace('v', '')
              pattern = rf'\[{re.escape(version)}\].*?\n(.*?)(?=\n##|\Z)'
              match = re.search(pattern, content, re.DOTALL)
              
              if match:
                  release_notes = match.group(1).strip()
                  # Clean up the notes
                  release_notes = re.sub(r'\n\s*\n', '\n\n', release_notes)
                  print(release_notes)
              else:
                  print(f"Release notes for version {version}")
          
          except FileNotFoundError:
              print(f"Release notes for version {version}")
          EOF > release-notes.md
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ github.ref_name }}
          bodyFile: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # Post-release validation
  post-release-validation:
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Wait for PyPI propagation
        run: |
          echo "Waiting for PyPI package propagation..."
          sleep 300  # Wait 5 minutes
      
      - name: Test installation from PyPI
        run: |
          # Install from PyPI
          pip install mixed-precision-multigrid
          
          # Verify version
          VERSION=${GITHUB_REF#refs/tags/v}
          INSTALLED_VERSION=$(python -c "import multigrid; print(multigrid.__version__)")
          
          if [ "$INSTALLED_VERSION" = "$VERSION" ]; then
            echo "✅ PyPI installation successful - version $VERSION"
          else
            echo "❌ Version mismatch: expected $VERSION, got $INSTALLED_VERSION"
            exit 1
          fi
      
      - name: Run installation verification
        run: |
          # Download and run verification script
          curl -sSL https://raw.githubusercontent.com/tanishagupta/Mixed_Precision_Multigrid_Solvers_for_PDEs/main/scripts/verify_installation.py | python

  # Notify on completion
  notify-completion:
    runs-on: ubuntu-latest
    needs: [post-release-validation]
    if: always()
    
    steps:
      - name: Notify release completion
        run: |
          if [ "${{ needs.post-release-validation.result }}" = "success" ]; then
            echo "🎉 Release pipeline completed successfully!"
            echo "Package is now available on PyPI: https://pypi.org/project/mixed-precision-multigrid/"
          else
            echo "❌ Release pipeline failed or was cancelled"
            exit 1
          fi